{"version":3,"sources":["components/Todolist.js","components/inpuInButtons.js","components/afterAdd.js","containers/App.js","serviceWorker.js","reducers/index.js","reducers/todoList.js","index.js"],"names":["reduxForm","form","React","memo","_ref","handleSubmit","pristine","submitting","reset","input","react_default","a","createElement","onSubmit","className","Field","name","type","component","label","style","width","disabled","undefined","clubName","v","handleClose","close","role","aria-label","onClick","e","handleEdit","handleDelete","App","handleAdd","_this$props","_this","props","add","values","del","preventDefault","edit","newValueForAction","_this$props2","addNewValue","newValue","InputInButtons","_this2","this","_this$props3","store","components_Todolist","todoListReducer","map","key","id","clicked","inpuInButtons","afterAdd","Component","connect","state","getFormValues","dispatch","value","Boolean","window","location","hostname","match","rootReducer","combineReducers","arguments","length","action","concat","Object","toConsumableArray","uuid4","i","arr","objectSpread","trim","filter","todo","formReducer","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6be4ad25.chunk.js","sourcesContent":["import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\n\nconst Todolist = ({ handleSubmit, pristine, reset, submitting,input}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n\n        <label>Mega(no) list</label>\n\n        <div className=\"container input-group justify-content-center pr-0\">\n          <Field\n            className=\"form-control\"\n            name=\"clubName\"\n            type=\"text\"\n            component=\"input\"\n            label=\"Mega(no) list\"\n          />\n          <button\n            style={{ width: 130 }}\n            className=\"btn btn-info \"\n            type=\"submit\"\n            disabled={pristine || submitting||(input.clubName===undefined)}\n          >\n            Add action\n          </button>\n\n      </div>\n    </form>\n  );\n};\n\nexport default reduxForm({\n  form: \"Todolist\",\n\n})(React.memo(Todolist));\n","import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nconst InputInButtons = ({\n  handleSubmit,\n  pristine,\n  v,\n  reset,\n  submitting,\n  close,\n  handleClose\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"d-flex input-group justify-content-end pr-0 ml-0\">\n        <Field\n          className=\"form-control\"\n          name=\"InputInButtons\"\n          type=\"text\"\n          component=\"input\"\n        />\n        <div className=\"btn-group ml-3\" role=\"group\" aria-label=\"Basic example\">\n          <button\n            style={{ width: 65 }}\n            className=\"btn btn-success w-50px \"\n            type=\"submit\"\n            disabled={pristine || submitting}\n          >\n            OK\n          </button>\n          <button\n            style={{ width: 65 }}\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={e => handleClose(v, e)}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default reduxForm({\n  form: \"InputInButtons\" // a unique identifier for this form\n})(React.memo(InputInButtons));\n","import React from \"react\";\nimport {connect} from \"react-redux\";\n\nconst AfterAdd = ({v,handleEdit,handleDelete}) => {\n  return (\n    <div\n      className=\"btn-group col-auto pr-0\"\n      role=\"group\"\n      aria-label=\"Basic example\"\n    >\n      <button\n        style={{ width: 65 }}\n        type=\"button\"\n        className=\"btn btn-primary\"\n        onClick={e => handleEdit(v, e)}\n      >\n        Edit\n      </button>\n      <button\n        style={{ width: 65 }}\n        type=\"button\"\n        className=\"btn btn-danger \"\n        onClick={e => handleDelete(v, e)}\n      >\n        Delete\n      </button>\n    </div>\n  );\n};\n\nexport default React.memo(AfterAdd);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\nimport Todolist from \"../components/Todolist\";\nimport InputInButtons from \"../components/inpuInButtons\";\nimport { getFormValues } from \"redux-form\";\nimport AfterAdd from \"../components/afterAdd\";\n\nclass App extends Component {\n\n  handleAdd = () => {\n    const { add, values } = this.props;\n\n    add(values);\n    return (values.clubName = undefined);\n  };\n\n  handleDelete = (v, e) => {\n    const { del } = this.props;\n    e.preventDefault();\n    del(v);\n  };\n  handleEdit = (v, e) => {\n    e.preventDefault();\n    const { edit } = this.props;\n    edit(v);\n  };\n  handleClose = (v, e) => {\n    e.preventDefault();\n    const { close } = this.props;\n    close(v);\n  };\n  newValueForAction = v => {\n    const { addNewValue, newValue } = this.props;\n\n    addNewValue(newValue, v);\n    newValue.InputInButtons = \"\";\n  };\n\n  render() {\n    const { store, close, values } = this.props;\n\n    return (\n      <div className=\"App container col-6 pr-0\">\n        <Todolist\n          onSubmit={() => this.handleAdd()}\n          input={values}\n\n        />\n        <ul className=\"\">\n          {store.todoListReducer.map(v => (\n            <li\n              key={v.id}\n              className=\"row container-fluid input-group justify-content-between pr-0 m-0 mt-1\"\n            >\n              <div className=\"row col-auto\">{v.values}</div>\n\n              {v.clicked ? (\n                <InputInButtons\n                  v={v}\n                  handleClose={(v, e) => this.handleClose(v, e)}\n                  close={close}\n                  onSubmit={() => this.newValueForAction(v)}\n                />\n              ) : null}\n\n              {v.clicked ? null : (\n                <AfterAdd\n                  v={v}\n                  handleEdit={(v, e) => this.handleEdit(v, e)}\n                  handleDelete={(v, e) => this.handleDelete(v, e)}\n                />\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    store: state,\n    values: getFormValues(\"Todolist\")(state),\n    newValue: getFormValues(\"InputInButtons\")(state)\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    add: values => dispatch({ type: \"ADD\", values }),\n    edit: v => dispatch({ type: \"EDIT\", id: v.id }),\n    del: v => dispatch({ type: \"DELETE\", id: v.id }),\n    close: v => dispatch({ type: \"CLOSE\", id: v.id }),\n    addNewValue: (newValue, v) => {\n      dispatch({ type: \"NEWVALUE\", value: newValue, id: v.id });\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport todoListReducer from \"./todoList\";\n\nconst rootReducer = combineReducers({\n  todoListReducer,\n\n  form: formReducer\n});\n\nexport const store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import uuid4 from \"uuid4\";\nexport default function todoListReducer(state = [], action) {\n  switch (action.type) {\n    case \"ADD\":\n      return [\n        ...state,\n        {\n          id: uuid4(),\n          values: action.values.clubName\n        }\n      ];\n    case \"EDIT\":\n      return [...state].map((v, i, arr) =>\n        v.id === action.id\n          ? {\n              ...v,\n              clicked: true\n            }\n          : v\n      );\n    case \"CLOSE\":\n      return [...state].map((v, i, arr) =>\n        v.id === action.id\n          ? {\n              ...v,\n              clicked: false\n            }\n          : v\n      );\n    case \"NEWVALUE\":\n      if (action.value.InputInButtons.trim() === \"\") {\n        return state.filter(todo => todo.id !== action.id);\n      }\n      return [...state].map(v =>\n        v.id === action.id\n          ? {\n              ...v,\n              values: action.value.InputInButtons,\n              clicked: false\n            }\n          : v\n      );\n\n    case \"DELETE\":\n      return state.filter(todo => todo.id !== action.id);\n\n    default:\n      return state;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./reducers/index\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}